name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Go Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Settings for test_split
        total_test_splits: [5]
        index: [0, 1, 2, 3, 4]

    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: stable
      id: go

    - name: Generate go test Slice
      id: test_split
      uses: hashicorp-forge/go-test-split-action@v1
      with:
        total: ${{ matrix.total_test_splits }}
        index: ${{ matrix.index }}

    - name: Run Tests (Linux)
      if: runner.os == 'Linux'
      env:
        GOTEST_FLAGS: '-run "${{ steps.test_split.outputs.run}}"'
      run: make check

    - name: Run Short Tests (Non-Linux)
      if: runner.os != 'Linux'
      env:
        GOTEST_FLAGS: '-short -run "${{ steps.test_split.outputs.run}}"'
      run: make check

    - name: Upload Code Coverage
      if: runner.os == 'Linux'
      run: bash <(curl -s https://codecov.io/bash)

  winbuild:
    name: Build (Windows)
    runs-on: [ windows-latest ]
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: stable
      id: go

    - name: Install make (Windows)
      run: |
        choco install -y make mingw

    - name: Run Short Tests (Non-Linux)
      run: |
        go test ./... -short

  docker:
    name: Docker build
    runs-on: [ ubuntu-latest ]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: stable
      id: go

    - name: Setup Node / NPM
      if: runner.os == 'Linux'
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    # disable and stop mono-xsp4.service
    # Details: https://github.com/actions/virtual-environments/issues/2821
    - name: Ubuntu 20.04 Cleanup
      if: runner.os == 'Linux'
      run: |
        sudo systemctl disable mono-xsp4.service || true
        sudo systemctl stop mono-xsp4.service || true
        sudo killall mono || true

    - name: Build Frontend
      run: make build

    - name: Docker Build
      if: runner.os == 'Linux'
      run: make docker-hub

    - name: Build batchsearch
      if: runner.os == 'Linux'
      run: make build-batchsearch

    # - name: Integration Test
    #   if: runner.os == 'Linux'
    #   run: make test-integration

    - name: Test Cleanup
      if: runner.os == 'Linux' && always()
      run: |
        docker compose logs
        make clean-integration
